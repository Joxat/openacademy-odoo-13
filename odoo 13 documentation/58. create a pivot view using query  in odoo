this is the hardest part of odoo at all - personally. 

creating a pivot view means you are going to take from the available models you have 

the hard part isn't creating it 
it's about which field are you taking from the available models
lemme make it more clearer 

you have 2 models and they both have field in name ( the 2 share the same name for 2 the fields that function in different manner)

create a .py file 
import it to the __init__.py file 


now let's define what's will be inside the .py file 

class Pivot_OA(models.model):
 _name = 'Product.sale.analysis' # it is advised to name it according to the fields that you are inheriting from 'in reality you can name it whatever you want'
 _auto = False #just set it to False LOL 
 _description = 'Analysis of Product sale model'
 then create fields (notice that the majority of fields are gonna be inherited from differnet models so don't PANIC)
  
   Fields: 
  
   product_id = fields.Many2one(product.product, string="Product")
   date = fields.Date('Invoice Date')
   quantity = fields.Float('Quantity')
   untaxed_total = fields.Float("Untaxed")
   total = fields.Float("Total")
   invoice_id = fields.Many2one("account.move", string="invoice")
   partner_id = fields.Many2one('res.partner', string='partner', readonly=True)
   user_id = fields.Many2one('res.users', string='Salesperson', readonly=True)
   type = fields.Selection([
   ('out_invoice','Customer Invoice'),
   ('our_refund','Customer Credit Note'),
   ], readonly=True)
   state = fields.Selection([
   ('draft','Draft'),
   ('open','Open'),
   ('paid','Paid'),
   ('cancel','Cancel'),
   ],string="Invoice Status", readonly=True)
   exclude_from_invoice_tab = fields.Boolean('Exclude from invoice')
  
  
  the following syntax is important to create a pivot view in odoo thru Query data
  
   def init(self):
     tools.drop_view_if_exists(self.env.cr, 'model_model')
     self.env.cr.execute("""
     CREATE OR REPLACE VIEW model_model AS anything 
            SELECT
            row_number() OVER () AS id, # you can replace id with anything
              SELECT
            FROM model_model 
  
   
   now to the following part (you have to be somewhat familiar with postgreSQL ), just copy it the way it is 
   def init(self):
     tools.drop_view_if_exists(self.env.cr, 'model_model')
     self.env.cr.execute("""
     CREATE OR REPLACE VIEW model_model AS ( #if you have a model e.g product.product it'll be product_product
       SELECT
            row_number() OVER () AS id, # you can replace id with anything
            SELECT
                anything.attribute as field(the fields defined upthere) e.g p.id as product_id 
            FROM model_model AS anything # from e.g product_product AS p ( so this says product_id is linked to the p.id from the model product_product) ( in another words, change the store the p.id in the product_id 
            
     
     )
     
      """)
   def init(self):
     tools.drop_view_if_exists(self.env.cr, 'product_sale_analysis')
     self.env.cr.execute("""
     CREATE OR REPLACE VIEW product_sale_analysis AS 
     ("""
       SELECT
            row_number() OVER () AS id, # you can replace id with anything
            SELECT
                p.id as product_id 
            FROM product_product AS p 

            # ( so this says product_id is linked to the p.id from the model product_product) ( in another words, store the value that's 
            coming from product_product as p.id in the product_id) 
            ياخ من الاخر القيمة حقت p.id الجاية من المودل product_product خزنها في product_id 
            s
           
     
     
     
     
     )
     
      """)
      
      now let's define the other models in the same manner but depends on certain conditions and here where LEFT JOIN comes into play 
      LEFT JOIN model_model abbreviation_of_the_model ON (condition "note that the condition is regulary picked based on the id") 
  e.g LEFT JOIN account_move am ON ()
      
         def init(self):
     tools.drop_view_if_exists(self.env.cr, 'product_sale_analysis')
     self.env.cr.execute("""
     CREATE OR REPLACE VIEW product_sale_analysis AS 
     ("""
       SELECT
            row_number() OVER () AS id, # you can replace id with anything
            SELECT
                p.id as product_id
                am.invoice_date as date
                aml.quanitity
                aml.price_subtotal as total
                aml.move_id as invoice_id
                aml.partner_id as partner_id
                am.invoice_user_id as user.id
                am.type as type 
            FROM product_product AS p
            LEFT JOIN account_move_line aml ON (p.id = aml.product.id)
            LEFT JOIN account_move ON (aml_move.id = am.id)
            
         
     )
     
      """)      
   
   
   
   
   
   
   
   
   
   
   
   
   
   

FUCK IT DONT COUNT THIS 

